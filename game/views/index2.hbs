<!DOCTYPE html>
<html>
<head>

<meta name="viewport" content="width=device-width, initial-scale=1.0"/>

<style>
canvas {
    border:1px solid #d3d3d3;
    background-image: url("/images/bg.jpg");
    /*background-color: #3e3e3e;*/
}
</style>
</head>
<body onload="startGame()">
<script>
Myo.connect('com.stolksdorf.myAwesomeApp');

Myo.on('connected', function(){
  Myo.setLockingPolicy('none');

});


var char1;
var char2;
var bullets1 = [];
var bullets2 = [];

function startGame() {
	char1 = new Player(100, 600, "red", 1, 1);
	char2 = new Player(1650, 600, "blue", -1, 2);
    myGameArea.start();
}

var myGameArea = {
    canvas : document.createElement("canvas"),
    start : function() {
        this.canvas.width = 1750;
        this.canvas.height = 800;
        this.context = this.canvas.getContext("2d");
        
        document.body.insertBefore(this.canvas, document.body.childNodes[0]);
        this.frameNo = 0;
        this.interval = setInterval(updateGameArea, 20);
        },
    clear : function() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
}

function Bullet(x,y,dir, firer){
	this.x = x;
	this.y = y;
	this.dir = dir;
	this.firer = firer;

	this.xspeed = this.dir*12;

	this.update = function(){
		this.x += this.xspeed;
		this.result = this.checkCollision();
		if(this.result){
			ctx = myGameArea.context;
			ctx.fillStyle = "yellow";
			ctx.fillRect(this.x, this.y, 5, 5);
		}
		else{
			if(this.firer == 1){
				bullets1.pop();
			}
			else(this.firer == 2){
				bullets2.pop();
			}
		}	
	}

	this.checkCollision = function(){
		
		if((this.x >= char1.x && this.x <= char1.x+30 && this.y >= char1.y && this.y <= char1.y+30) || (this.x >= char2.x && this.x <= char2.x+30 && this.y >= char2.y && this.y <= char2.y+30)){
			return 0;
		}
		else{
			return 1;
		}
	}
}

 
function Player(x, y, color, dir, num){
	this.x = x;
	this.y = y;
	this.health = 100;
	this.color = color;
	this.speedX = 0;
	this.speedY = 0.5;
	this.jumping = false;
	this.grounded = true;
	this.gravity = 1;
	this.friction = 1;
	this.dir = dir;
	this.num = num;
	

	this.update = function(){
		
		this.speedY += this.gravity;
		this.speedX *= this.friction;
		this.x += this.speedX;
		this.y += this.speedY;

	
		if(this.x < 0){
			this.x = 0;
		}
		if(this.x > 1700){
			this.x = 1700;
		}
		//console.log(this.x);
		this.detectCollision();
		ctx = myGameArea.context;
		ctx.fillStyle = this.color;
		ctx.fillRect(this.x, this.y, 30, 30);
	}

	this.move = function(dirx){
		this.speedX = dirx*10;
	}

	this.detectCollision = function(){
		if(this.y > 170 && this.y < 210 && this.x >= 500 && this.x <= 1200 && this.speedY >= 0){
			this.y = 170;
			this.speedY = 0;
			this.grounded = true;
			this.jumping = false;
		}
		else if(this.y > 350 && this.y < 400 && ((this.x < 600 && this.x >= 0) || (this.x > 1150 && this.x <= 1700)) && this.speedY >= 0){
			this.y = 350;
			this.speedY = 0;
			this.grounded = true;
			this.jumping = false;
		}
		else if(this.y > 600){
			this.y = 600;
			this.speedY = 0;
			this.grounded = true;
			this.jumping = false;
		}
		else if(this.x < 0){
			this.x = 0;
			
		}
		else if(this.x > 1700){
			this.x = 1700;
		}
		else{
			this.gravity = 1;
		}
	}

	this.jump = function(jumping){
		if(!this.jumping && this.grounded){
			this.jumping = true;
			this.grounded = false;
			this.speedY = -25;
			this.gravity = 1;   
		}
	}

	this.makeBullet = function(){
		if(this.dir == 1){
			var b = new Bullet(this.x+30, this.y+12, this.dir);
		}
		else{
			var b = new Bullet(this.x, this.y+12, this.dir);
		}
		if(this.num == 1){
			bullets1.push(b);
		}
		else{
			bullets2.push(b);
		}
	}
}
function component(width, height, color, x, y, type) {
    this.type = type;
    this.score = 0;
    this.width = width;
    this.height = height;
    this.speedX = 0;
    this.speedY = 0;    
    this.x = x;
    this.y = y;
    this.gravity = 0;
    this.gravitySpeed = 0;
    this.update = function() {
        ctx = myGameArea.context;
        if (this.type == "text") {
            ctx.font = this.width + " " + this.height;
            ctx.fillStyle = color;
            ctx.fillText(this.text, this.x, this.y);
        } else {
            ctx.fillStyle = color;
            ctx.fillRect(this.x, this.y, this.width, this.height);
        }
    }
    this.newPos = function() {
        this.gravitySpeed += this.gravity;
        this.x += this.speedX;
        this.y += this.speedY + this.gravitySpeed;
        this.hitBottom();
    }
    this.hitBottom = function() {
        var rockbottom = myGameArea.canvas.height - this.height;
        if (this.y > rockbottom) {
            this.y = rockbottom;
            this.gravitySpeed = 0;
        }
    }
    this.crashWith = function(otherobj) {
        var myleft = this.x;
        var myright = this.x + (this.width);
        var mytop = this.y;
        var mybottom = this.y + (this.height);
        var otherleft = otherobj.x;
        var otherright = otherobj.x + (otherobj.width);
        var othertop = otherobj.y;
        var otherbottom = otherobj.y + (otherobj.height);
        var crash = true;
        if ((mybottom < othertop) || (mytop > otherbottom) || (myright < otherleft) || (myleft > otherright)) {
            crash = false;
        }
        return crash;
    }
}

function updateGameArea() { 
    myGameArea.clear();
    char1.update();
    char2.update();

    if(bullets1.length){
    	for(var i = 0; i < bullets1.length; i++){
    		bullets1[i].update();
    	}
    }

    if(bullets2.length){
    	for(var j = 0; j < bullets2.length; j++){
    		bullets2[j].update();
    	}
    }
}

function everyinterval(n) {
    if ((myGameArea.frameNo / n) % 1 == 0) {return true;}
    return false;
}

function accelerate(n) {
    myGamePiece.gravity = n;
}

window.addEventListener("keydown", function(event){
	if(event.keyCode == 39){
		char1.move(1);
		char1.dir = 1;
	}
	if(event.keyCode == 37){
		char1.move(-1);
		char1.dir = -1;
	}
	if(event.keyCode == 32){
		char1.makeBullet();
	}
});

window.addEventListener("keyup", function(event){
	if(event.keyCode == 39 || event.keyCode == 37){
		char1.move(0);
	}
	if(event.keyCode == 32){
		char1.speedY = 0;
	}

});



/*Myo.on('wave_out', function(){
	Myo.setLockingPolicy('none');
	if(this.name == 'My Myo'){
		//this.vibrate();
		char1.move(1);
	}
	else{
		char2.move(1);
	}
});

Myo.on('wave_in', function(){
	Myo.setLockingPolicy('none');
	if(this.name == 'My Myo'){
		//this.vibrate();
		char1.move(-1);
	}
	else{
		char2.move(-1);
	}
});

Myo.on('fist', function(){
	Myo.setLockingPolicy('none');
	if(this.name == 'My Myo'){
		//this.vibrate();
		char1.makeBullet();
	}
	else{
		char2.makeBullet();
	}
});


Myo.on('rest', function(){
	if(this.name == 'My Myo'){
		//this.vibrate();
		char1.move(0);
	}
	else{
		char2.move(0);
	}
});*/
</script>

</body>
</html>