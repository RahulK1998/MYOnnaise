<!DOCTYPE html>
<html>
<head>

<meta name="viewport" content="width=device-width, initial-scale=1.0"/>

<style>
canvas {
    border:1px solid #d3d3d3;
    background-image: url("/images/bg.jpg");
    /*background-color: #3e3e3e;*/
}
</style>

</head>
<body onload="startGame()">

<script>
Myo.connect('com.stolksdorf.myAwesomeApp');

Myo.on('connected', function(){
  Myo.setLockingPolicy('none');

});

var time = 0;
var gameover = false;
var char1;
var char2;
var charsprites = new Image();
charsprites.src = '/images/sprites.png';
var impactimg = new Image();
impactimg.src = '/images/impact.png';
var bullets1 = [];
var bullets2 = [];
var HP1 = new text(50, 50, "black", 1);
var HP2 = new text(1350, 50, "black", 2);

function startGame() {
	char1 = new Player(100, 460, charsprites, 1, 1);
	char2 = new Player(1650, 460, charsprites, -1, 2);

    myGameArea.start();
}

var myGameArea = {
    canvas : document.createElement("canvas"),
    start : function() {
        this.canvas.width = 1750;
        this.canvas.height = 800;
        this.context = this.canvas.getContext("2d");
        
        document.body.insertBefore(this.canvas, document.body.childNodes[0]);
        this.frameNo = 0;
        this.interval = setInterval(updateGameArea, 20);

        },
    clear : function() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
}

function Bullet(x,y,dir, firer){
	this.x = x;
	this.y = y;
	this.dir = dir;
	this.firer = firer;

	this.xspeed = this.dir*15;

	this.update = function(){
		this.x += this.xspeed;
		this.result = this.checkCollision();
		if(this.result){
			ctx = myGameArea.context;
			ctx.fillStyle = "yellow";
			ctx.fillRect(this.x, this.y, 20, 20);
		}
		else{

			if(this.firer == 1){
				
				bullets1.pop();
				char2.health -= 10;
			}
			else{
				
				bullets2.pop();
				char1.health -= 10;
			}
			
		}
		
	}

	this.checkCollision = function(){
		
		if((this.x >= char1.x && this.x <= char1.x+120 && this.y >= char1.y && this.y <= char1.y+160) || (this.x >= char2.x && this.x <= char2.x+120 && this.y >= char2.y && this.y <= char2.y+160)){
			return 0;
		}
		else{
			return 1;
		}
	}
}

 
function Player(x, y, img, dir, num){
	this.x = x;
	this.y = y;
	this.health = 100;
	this.img = img;
	this.speedX = 0;
	this.speedY = 0.5;
	this.jumping = false;
	this.grounded = true;
	this.gravity = 1;
	this.friction = 1;
	this.dir = dir;
	this.num = num;
	this.smash = false;

	this.update = function(){
		
		this.speedY += this.gravity;
		this.speedX *= this.friction;
		this.x += this.speedX;
		this.y += this.speedY;

	
		if(this.x < 0){
			this.x = 0;
		}
		if(this.x > 1700){
			this.x = 1700;
		}
		//console.log(this.x);
		this.detectCollision();
		ctx = myGameArea.context;
		
		if(this.speedX){
			ctx.drawImage(this.img, 600+this.dir*300,800-this.num*400, 300, 400, this.x, this.y, 120,160);
		}
		else{
			ctx.drawImage(this.img, 300+this.dir*300,800-this.num*400, 300, 400, this.x, this.y, 120,160);
		}
		
		//ctx.fillRect(this.x, this.y, 30, 30);
	}

	this.move = function(dirx){
		this.speedX = dirx*10;
	}

	this.detectCollision = function(){
		if(this.y > 40 && this.y < 90 && this.x >= 420 && this.x <= 1150 && this.speedY >= 0){
			this.y = 40;
			this.speedY = 0;
			this.grounded = true;
			this.jumping = false;
			if(this.smash){
				this.smash = false;
				this.smashRadius();
				
			}
		}
		else if(this.y > 220 && this.y < 270 && ((this.x < 500 && this.x >= 0) || (this.x > 1120 && this.x <= 1700)) && this.speedY >= 0){
			this.y = 220;
			this.speedY = 0;
			this.grounded = true;
			this.jumping = false;
			if(this.smash){
				this.smash = false;
				this.smashRadius();
				
			}
		}
		else if(this.y > 460){
			this.y = 460;
			this.speedY = 0;
			this.grounded = true;
			this.jumping = false;
			if(this.smash){
				this.smash = false;
				this.smashRadius();
				
			}
		}
		else if(this.x < 0){
			this.x = 0;
			
		}
		else if(this.x > 1700){
			this.x = 1700;
		}
		else{
			this.gravity = 1;
		}
	}

	this.jump = function(jumping){
		if(!this.jumping && this.grounded){
			this.jumping = true;
			this.grounded = false;
			this.speedY = -25;
			this.gravity = 1;   
		}
	}

	this.makeBullet = function(){

		if(this.dir == 1){
			var b = new Bullet(this.x+120, this.y+80, this.dir, this.num);
		}
		else{

			var b = new Bullet(this.x, this.y+80, this.dir, this.num);
		}
		if(this.num == 1){
			bullets1.push(b);
			
		}
		else{
			bullets2.push(b);
			

		}
		
	}

	this.smashRadius = function(){
		ctx = myGameArea.context;
		ctx.drawImage(impactimg, 0,0, 483,64, this.x-30,this.y+130,180,30);

		if(this.num == 1){
			if((char2.x < this.x + 50 && char2.x > this.x - 50) && (char2.y < this.y + 50 && char2.y > this.y -50)){
				char2.health -= 15;
			}
		}
		else{
			//console.log(char1.x, this.x)
			if((char1.x < this.x + 50 && char1.x > this.x - 50) && (char1.y < this.y + 50 && char1.y > this.y -50)){
				char1.health -= 15;
			}
		}
	}
}

function text(x, y, color, num){
	this.x = x;
	this.y = y;
	this.color = color;
	this.num = num;

	this.update = function(){
		ctx = myGameArea.context;
		if(this.num == 1){
			this.text = "Player 1: ";
			ctx.fillStyle = "green";
			if(char1.health){
				ctx.fillRect(this.x+120, this.y-21, 250-2.5*(100-char1.health), 25);
			}
		}
		else{
			ctx.fillStyle='green';
			this.text = "Player 2: ";
			if(char2.health){
				ctx.fillRect(this.x+120, this.y-21, 250-2.5*(100-char2.health), 25);
			}
		}
		ctx.fillStyle = this.color;
		ctx.font = "35px Garamond";
		ctx.fillText(this.text, this.x, this.y);
	}
}

function updateGameArea() { 
    myGameArea.clear();



    if(char1.health > 0 && char2.health > 0){
    	ctx = myGameArea.context;

    	time += 0.02;
    	ctx.fillStyle = "black";
    	var t = "Time: "+time.toFixed(2) + "s";
    	ctx.fillText(t, 800,50);
    	char1.update();
    	char2.update();
    
    
		if(bullets2.length){
		
    		for(var j = 0; j < bullets2.length; j++){
    		
    			bullets2[j].update();
    		}
    	}
    	if(bullets1.length){
    	
    		for(var i = 0; i < bullets1.length; i++){
    			bullets1[i].update();
    		}
    	}

   	 	HP1.update();
    	HP2.update();
	}
	else{
		ctx = myGameArea.context;
		ctx.fillStyle = "black";
		ctx.fillRect(0,0,myGameArea.canvas.width, myGameArea.canvas.height);
		ctx.fillStyle = "white";
		if(char1.health <= 0){
			ctx.font = "35px Garamond";
			ctx.fillText("GAME OVER. Player 2 Wins. Double tap finger to exit", 480, 300);
		}
		else{
			ctx.font = "35px Garamond";
			ctx.fillText("GAME OVER. Player 1 Wins. Double tap finger to exit", 480, 300);
		}
		gameover = true;
		clearInterval(myGameArea.interval);

	}
 

}

/*window.addEventListener("keydown", function(event){
	if(event.keyCode == 39){
		char1.move(1);
		char1.dir = 1;
	}
	if(event.keyCode == 37){
		char1.move(-1);
		char1.dir = -1;
	}
	if(event.keyCode == 32){
		char1.makeBullet();
	}
});

window.addEventListener("keyup", function(event){
	if(event.keyCode == 39 || event.keyCode == 37){
		char1.move(0);
	}
	if(event.keyCode == 32){
		char1.speedY = 0;
	}

});*/



Myo.on('wave_out', function(){
	Myo.setLockingPolicy('none');
	if(this.name == 'My Myo'){
		//this.vibrate();
		char1.move(1);
		char1.dir =1;
	}
	else{

		char2.move(1);
		char2.dir = 1;
	}
});

Myo.on('wave_in', function(){
	Myo.setLockingPolicy('none');
	if(this.name == 'My Myo'){
		//this.vibrate();
		char1.move(-1);
		char1.dir = -1;
	}
	else{
		char2.move(-1);
		char2.dir = -1;
	}
});

Myo.on('fist', function(){
	Myo.setLockingPolicy('none');
	if(this.name == 'My Myo'){
		//this.vibrate();
		char1.makeBullet();
	}
	else{
		char2.makeBullet();

	}
});

Myo.on('fingers_spread', function(){
	Myo.setLockingPolicy('none');
	if(this.name == 'My Myo'){
		//this.vibrate();
		char1.makeBullet();
	}
	else{
		char2.makeBullet();

	}

});

Myo.on('double_tap', function(){
	Myo.setLockingPolicy('none');
	if(this.name == 'My Myo'){
		//this.vibrate();
		char1.makeBullet();
	}
	else{
		char2.makeBullet();

	}
	if(gameover){
		window.location.replace('/');
	}
});


Myo.on('rest', function(){
	if(this.name == 'My Myo'){
		//this.vibrate();
		char1.move(0);
	}
	else{
		char2.move(0);
	}
});
</script>

</body>
</html>